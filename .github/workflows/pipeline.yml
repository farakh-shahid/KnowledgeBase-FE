name: CI-CD Pipline
on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
          echo 'Running installation dependencies ...'
          yarn install --frozen-lockfile
      - name: Run Linting
        run: |
          echo 'Running linting tests ...'
          yarn run lint
        env:
          CI: true
  build:
    name: Builder
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    steps:
      - name: Clone Repository
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
      - run: |
          echo 'Resolving packages ...'
          yarn install --frozen-lockfile
      - run: |
          echo 'Creating build ...'
          yarn run build
  test:
    name: Tester
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Clone Repository
        uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
          echo 'Running installation dependencies ...'
          yarn install --frozen-lockfile
      - name: Run Tests
        run: |
          echo 'Running jest test cases ...'
          yarn run test --runInBand --passWithNoTests
  deploy:
    name: Vercel Deployment
    runs-on: ubuntu-latest
    needs: [test, build]
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
